#!/bin/bash

rm -f complete_pytest.tin.out

module purge
# module load compiler/gnu python/system python_extras/quippy lapack/mkl
module load compiler/gnu python python_extras/quippy lapack/mkl python_extras/wif
module load python_extras/torch/cpu

if [ -z "$WFL_PYTEST_EXPYRE_INFO" ]; then
    echo "To override partition used, set WFL_PYTEST_EXPYRE_INFO='{\"resources\" : {\"partitions\": \"DESIRED_PARTITION\"}}'" 1>&2
fi

if [ ! -z $WFL_PYTHONPATH_EXTRA ]; then
    export PYTHONPATH=${WFL_PYTHONPATH_EXTRA}:${PYTHONPATH}
fi

export JULIA_PROJECT=${PWD}/tests/assets/julia

# should include both tin and tin_ssh - not as good as real remote machine, but maybe close enough
if [ -z $EXPYRE_PYTEST_SYSTEMS ]; then
    echo "Set EXPYRE_PYTEST_SYSTEMS to regexp matching existing systems to test on. Defaulting to 'tin', which also matches 'tin_ssh'" 1>&2
    export EXPYRE_PYTEST_SYSTEMS='tin'
fi

echo  "GIT VERSION " $( git describe --always --tags --dirty ) >> complete_pytest.tin.out
echo "" >> complete_pytest.tin.out 

# buildcell
export WFL_PYTEST_BUILDCELL=$HOME/src/work/AIRSS/airss-0.9.1/src/buildcell/src/buildcell
# VASP
module load dft/vasp
export ASE_VASP_COMMAND=vasp.serial
export ASE_VASP_COMMAND_GAMMA=vasp.gamma.serial
export PYTEST_VASP_POTCAR_DIR=$VASP_PATH/pot/rev_54/PBE
# QE
module load dft/pwscf
# no ORCA

export OPENBLAS_NUM_THREADS=1
export MKL_NUM_THREADS=1
# required for descriptor calc to not hang
export OMP_NUM_THREADS=1

if [ ! -z $WFL_PYTEST_DIR ]; then
    echo "Running in non-standard $WFL_PYTEST_DIR" 1>&2
    pytest_dir=$WFL_PYTEST_DIR
else
    pytest_dir=$HOME/pytest_wfl
fi

if [ -z $WFL_PYTEST_NO_RUN_REMOTE ]; then
    runremote="--runremote"
else
    echo "Omitting --runremote" 1>&2
fi

rm -rf $pytest_dir
if [ -d $pytest_dir ]; then
    echo "Refusing to run after failing to delete $pytest_dir" 1>&2
    exit 1
fi

mkdir -p $pytest_dir

python3 -m pytest -v -s --basetemp $pytest_dir ${runremote} --runslow --runperf -rxXs "$@" >> complete_pytest.tin.out 2>&1

l=`egrep '^=.*(passed|failed|skipped|xfailed|error).* in ' complete_pytest.tin.out`

echo "summary line $l"
lp=$( echo $l | sed -E -e 's/ in .*//' -e 's/\s*,\s*/\n/g' )

declare -A expected_n=( ["passed"]="177" ["skipped"]="21" ["warnings"]=823 ["xfailed"]=2 ["xpassed"]=1 )
IFS=$'\n'
t_stat=0
for out in $lp; do
    out_n=$(echo $out | sed -e 's/^=* //' -e 's/ .*//' -e 's/,//')
    out_cat=$(echo $out | sed -e 's/.* //' -e 's/,//')
    if [[ -z ${expected_n[$out_cat]} ]]; then
        echo "Unexpected result '$out_cat' num $out_n"
        t_stat=1
        break
    else
        if [[ ${expected_n[$out_cat]} != $out_n ]]; then
            echo "Unexpected number $out_n for result '$out_cat', expected ${expected_n[$out_cat]}"
            t_stat=1
            break
        fi
    fi
    if [[ $out_cat == "failed" ]]; then
        echo "FAILURE"
        t_stat=2
        break
    fi
done

if [ $t_stat == 0 ]; then
    echo "SUCCESSS"
else
    exit 1
fi
